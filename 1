import { Color4, Vector3 } from '@babylonjs/core'
import { FC, ReactNode, useRef } from 'react';
import { Engine, Scene, Camera, } from 'react-babylonjs'


//const SC_isometric: React.FC<{ children: ReactNode }> = ({ children }: { children: ReactNode }) => (


export default function SC_isometric({ children }: { children: ReactNode }) {

	const cameraRef = useRef(null);
	const onCameraMount = (camera) => {
		// Store the camera reference
		cameraRef.current = camera;

		// Your camera manipulation code can be executed here
		camera.inputs.removeByType('ArcRotateCameraPointersInput');
	};

	return (
		<div style={{ flex: 1, display: 'flex bg-transparent' }}>
			<Engine antialias adaptToDeviceRatio canvasId="babylon-canvas" renderOptions={{
				whenVisibleOnly: true,
			}} >
				<Scene
					clearColor={new Color4(0, 0, 0, 0)}>

					<arcRotateCamera
						radius={4}
						name="camera1"
						alpha={Math.PI / 4}
						beta={Math.PI / 4}
						target={Vector3.Zero()}
						lowerRadiusLimit={10}
						upperRadiusLimit={10}
						lowerBetaLimit={0}
						upperBetaLimit={5}
						ref={cameraRef}
						onC
					/>

					<hemisphericLight
						name="light1"
						intensity={1}
						direction={new Vector3(0, 1, 0)}
					/>

					{children}
				</Scene>
			</Engine>
		</div >
	)
}

